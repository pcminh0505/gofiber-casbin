definitions:
  controllers.AuthInput:
    properties:
      identity:
        type: string
      password:
        type: string
    type: object
  controllers.UpdatePasswordInput:
    properties:
      currentPassword:
        type: string
      newPassword:
        type: string
    type: object
  controllers.UserInput:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.Response:
    properties:
      data: {}
      error:
        type: boolean
      message:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
paths:
  /admin/users/:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create new user with username, password, name, email, and role
      parameters:
      - description: Enter user's info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Create new user
      tags:
      - users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update username, name, email, and role
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Enter user's info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update user's information
      tags:
      - users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login with username/email and password, return a cookie
      parameters:
      - description: Login with Username and Password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.AuthInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
      summary: Login a user
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout by overriding cookie expired time
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Logout a user
      tags:
      - auth
  /users/{id}/password:
    put:
      consumes:
      - application/json
      description: Update password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Enter user's info
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdatePasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
      summary: Update user's password
      tags:
      - users
swagger: "2.0"
